   
        <style media="screen">
            .axis path,
            .axis line {
                fill: none;
                stroke: black;
                shape-rendering: crispEdges;
            }
            /*.grid .tick {
                stroke: lightgrey;
                opacity: 0.7;
            }
            .grid path {
                  stroke-width: 0;
            }*/
        </style>

        <h1>Bitcoin BTC</h1>

        <script type="text/javascript">

        var xhr = new XMLHttpRequest();

        function makeRequest(){
            xhr.open("GET", "https://api.coindesk.com/v1/bpi/historical/close.json?start=2010-07-17&end=2017-09-11", true);
            xhr.send();
            xhr.onreadystatechange = processRequest;
        }

        function processRequest(){
            console.log("testing, state: ", xhr.readyState)
            if(xhr.readyState == 4 && xhr.status == 200){
                let response = JSON.parse(xhr.responseText);
                makeChart(response);
            }
        }

        function makeChart(response){
            var w = window.innerWidth - 100;
            var h = window.innerHeight - 100;
            // var w = 1000;
            // var h = 500;
            var padding = 20;
            var Lpadding = 45;

            // var parseDate = d3.time.format("%Y-%m-%d").parse;
            console.log(response);

            var makeDatesAndValues = function(input){
                console.log("insinde >>><><>< makeDates and tis is input", input)

                let dates = [];
                let values = [];
                let returnData = [];

                for(prop in input){
                    values.push(input[prop])

                    let counter = 0;
                    let year = [];
                    let month = [];
                    let day = [];

                    for( var j = 0; j < prop.length; j++){
                        if(lastDate[j] !== "-" && counter == 0){
                            year.push(prop[j]);
                        } else if(prop[j] == "-"){
                            counter++;
                        } else if(prop[j] !== "-" && counter == 1){
                            month.push(prop[j])
                        } else if(prop[j] !== "-" && counter == 2){
                            day.push(prop[j])
                        }
                    }
                    dates.push([Number(year.join("")), Number(month.join("")), Number(day.join(""))]);

                    returnData.push(
                        {
                            date: [Number(year.join("")), Number(month.join("")), Number(day.join(""))],
                            value: input[prop]
                        }
                    )
                }
                return returnData;
            }

            var lastDate = Object.keys(response.bpi)[Object.keys(response.bpi).length-1];
            var lastPrice = Object.values(response.bpi)[Object.values(response.bpi).length-1];

            var inputData = makeDatesAndValues(response.bpi);

            var svg = d3.select("body")
                        .append("svg")
                        .attr("width", w)
                        .attr("height", h);

            // console.log(inputData)

            var y = d3.scale.linear()
                            // .domain([d3.min(inputData, function(d){ return d.value; }), d3.max(inputData, function(d){ return d.value; })])
                            // .domain([d3.extent(d3.values(inputData, function(d){ return d.value}))])
                            .domain([0, 5000])
                            .range([h - padding, padding])

            // var yScale = d3.scale.linear()
            //                 // .domain([0, 5000])
            //                 .domain([d3.min(inputData, function(d){ return d.value; }), d3.max(inputData, function(d){ return d.value; })])
            //                 // .domain([d3.extent(d3.values(inputData, function(d){ return d.value}))])
            //                 .range([0, h])

            var x = d3.time.scale()
                                .domain([new Date(2010, 7, 18), new Date(2017, 7, 18)])
                                .range([Lpadding, w]);

            var xAxis = d3.svg.axis()
                            .scale(x)
                            .orient("bottom")
                            .ticks(8)

            var yAxis = d3.svg.axis()
                            .scale(y)
                            .orient("left")
                            // .tickSize(-w, 0, 0)
                            .ticks(8)


            svg.selectAll("circle")
                            .data(inputData)
                            .enter()
                            .append("circle")
                            .attr("cx", function(d){
                                let thisDate = x(new Date(d.date[0], d.date[1], d.date[2]))
                                return thisDate;
                            })
                            .attr("cy", function(d, i){
                                console.log("this is with yScale: ", y(d.value))
                                console.log("Without: ", d.value)
                                // return y(( d.value) - padding)
                                return y(d.value);
                                // return  y(d.value) - (h - padding)
                            })
                            .attr("r", function(d){
                                return 1;
                            })
                            .attr("fill", "red")

            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(" + 0 + ", " + (h - padding) + ")")
                .call(xAxis);

            svg.append("g")
                .attr("class", "y axis")
                .attr("transform", "translate(" + Lpadding + ", 0)")
                .call(yAxis);
        }

        makeRequest();

        </script>
